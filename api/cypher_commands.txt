// 1000 rows https://git.io/JOmL7
// 100 rows https://git.io/JOZZH


// create constraint to customer id for all customer
CREATE CONSTRAINT ON (user:User) ASSERT user.userID IS UNIQUE;

// create user nodes
:auto 
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS
FROM 'https://git.io/JOmL7'
AS line
WITH toInteger(line.CustomerID) AS userID, line WHERE NOT line.CustomerID IS null
MERGE(user:User {userID: userID})
ON CREATE SET user.country = line.Country;

// create constraint to stock code for all product
CREATE CONSTRAINT ON (product:Product) ASSERT product.stockCode IS UNIQUE;

// create product nodes
:auto 
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS
FROM 'https://git.io/JOmL7'
AS line
MERGE(product:Product {productID: line.StockCode})
ON CREATE SET product.description = line.Description;

// create constraint to order id for all orders
CREATE CONSTRAINT ON (order:Order) ASSERT order.orderID IS UNIQUE;

// create order nodes
:auto 
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS
FROM 'https://git.io/JOmL7'
AS line
MERGE(order:Order {orderID: line.InvoiceNo})
ON CREATE SET order.orderDate = line.InvoiceDate;

// create made relationships
:auto 
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS
FROM 'https://git.io/JOmL7'
AS line
WITH toInteger(line.CustomerID) AS UserID, line.InvoiceNo AS OrderID
MATCH (user:User {userID: UserID})
MATCH (order:Order {orderID: OrderID})
MERGE (user)-[:MADE]->(order);

// create contains relationships
:auto 
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS
FROM 'https://git.io/JOmL7'
AS line
WITH toInteger(line.Quantity) AS Quantity, toFloat(line.UnitPrice) AS UnitPrice, line.InvoiceNo AS OrderID, line.StockCode AS ProductID
MATCH (order:Order {orderID: OrderID})
MATCH (product:Product {productID: ProductID})
MERGE (order)-[r:CONTAINS]->(product)
	ON CREATE SET r.quantity = Quantity, r.price = UnitPrice * Quantity
	ON MATCH SET r.quantity = r.quantity + Quantity, r.price = r.price + UnitPrice * Quantity;

